kill(all) $

load("modal-basis")$
load("basis-precalc/basisSer1x1v")$
poly_order : 3 $
basisX : basisC[poly_order]
N : length(basisX)$
eta(xc, dx, basis) := subst(wx=x, subst(x=(wx-xc)/(dx/2), basis))$
baL : eta(-dx/2, dx, basisX) $
baR : eta(dx/2, dx, basisX) $
baC : eta(0, dx, basisX) $

r1p : doExpand(r1, create_list(x^i, i, 0, 2*N-1)) $
eqList1 : append(
  calcInnerProdListGen([x], [[-dx,0]], 1, baL, r1p-doExpand(qL, baL)),
  calcInnerProdListGen([x], [[0,dx]], 1, baR, r1p-doExpand(qR, baR))
) $
r1Sol : linsolve(eqList1, makelist(r1[i], i, 1, 2*N)) $
r1s : fullratsimp(subst(r1Sol, r1p)) $
substList : append(
  makelist(qR[i]=fR[i-1],i,1,N),
  makelist(qL[i]=fL[i-1],i,1,N)
) $
out : float(expand(subst(substList, r1s))) $
fh : openw("~/max-out/pgkyl_recov")$
printf(fh, sconcat("def p", poly_order, "e(x, fL, fR, dx):~%"))$
printf(fh, "    return ~a~%~%", out) $

qh : sum(q[j,i]*baC[i], i, 1,N) $
subListR : append(
  makelist(qL[i]=q[j,i], i,1,N), makelist(qR[i]=q[j+1,i], i,1,N)
) $
subListL : append(
  makelist(qL[i]=q[j-1,i], i,1,N), makelist(qR[i]=q[j,i], i,1,N)
) $
der : subst(x=0, diff(r1s, x)) $
val : subst(x=0, r1s) $
derL : subst(subListL, der) $
derR : subst(subListR, der) $
valL : subst(subListL, val) $
valR : subst(subListR, val) $

r2p : doExpand(r2, create_list(x^i, i, 0, N-1+4)) $
eqList2 : append(
  [derL-subst(x=-dx/2, diff(r2p, x))],
  [derR-subst(x=dx/2, diff(r2p, x))],
  [valL-subst(x=-dx/2, r2p)],
  [valR-subst(x=dx/2, r2p)],
  calcInnerProdListGen([x], [[-dx/2,dx/2]], 1, baC, r2p-qh)
)$
r2Sol : linsolve(eqList2, makelist(r2[i], i, 1, N+4)) $
r2s : fullratsimp(subst(r2Sol, r2p)) $
substList : append(
  makelist(q[j+1,i]=fR[i-1],i,1,N),
  makelist(q[j,i]=f[i-1],i,1,N),
  makelist(q[j-1,i]=fL[i-1],i,1,N)
) $
out : float(expand(subst(substList, r2s))) $
printf(fh, sconcat("def p", poly_order, "c1(x, f, fL, fR, dx):~%"))$
printf(fh, "    return ~a~%~%", out) $

r2p : doExpand(r2, create_list(x^i, i, 0, N-1+2)) $
eqList2 : append(
  [valL-subst(x=-dx/2, r2p)],
  [valR-subst(x=dx/2, r2p)],
  calcInnerProdListGen([x], [[-dx/2,dx/2]], 1, baC, r2p-qh)
)$
r2Sol : linsolve(eqList2, makelist(r2[i], i, 1, N+2)) $
r2s : fullratsimp(subst(r2Sol, r2p)) $
out : float(expand(subst(substList, r2s))) $
printf(fh, sconcat("def p", poly_order, "c0(x, f, fL, fR, dx):~%"))$
printf(fh, "    return ~a", out) $
close(fh)$