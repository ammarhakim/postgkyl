#!/usr/bin/env python
import click
import numpy

import postgkyl.commands as cmd
from postgkyl.data.load import GData, GHistoryData
from postgkyl.data.interp import GInterpZeroOrder

def _loadFrame(ctx, dataSetIdx, fileName):
    ctx.obj['data'].append(GData(fileName))
    numComps = ctx.obj['data'][dataSetIdx].q.shape[-1]
    ctx.obj['numComps'].append(numComps)
    dg = GInterpZeroOrder(ctx.obj['data'][dataSetIdx])
    coords, values = dg.project(0)
    values = numpy.expand_dims(values,
                               axis=ctx.obj['data'][dataSetIdx].numDims)
    if numComps > 1:
        for c in numpy.arange(numComps-1)+1:
            coords, v = dg.project(c)
            v = numpy.expand_dims(v, axis=ctx.obj['data'][dataSetIdx].numDims)
            values = numpy.append(values, v,
                                  axis=ctx.obj['data'][dataSetIdx].numDims)
    ctx.obj['coords'].append(coords)
    ctx.obj['values'].append(values)

def _loadHist(ctx, dataSetIdx, fileName):
    ctx.obj['data'].append('')
    hist = GHistoryData(fileName)
    tmp = numpy.expand_dims(hist.time, 0)
    ctx.obj['coords'].append(tmp)
    ctx.obj['values'].append(hist.values)

@click.group(chain=True)
@click.option('--filename', '-f', multiple=True,
              help='Specify one or more file(s) to work with.')
@click.pass_context
def cli(ctx, filename):
    #if filename == ():
    #    click.echo('No data file given. Specify file(s) with \'-f\'')
    #    ctx.exit()
    
    ctx.obj['files'] = filename
    numFiles = len(filename)
    ctx.obj['numFiles'] = numFiles
    ctx.obj['numComps'] = []
    ctx.obj['data'] = []
    ctx.obj['labels'] = []
    ctx.obj['coords'] = []
    ctx.obj['values'] = []

    for f in range(numFiles):
        if filename[f][-2:] == 'h5' or filename[f][-2:] == 'bp':
            _loadFrame(ctx, f, str(filename[f]))
        else:
            _loadHist(ctx, f, str(filename[f]))

cli.add_command(cmd.info.info)
cli.add_command(cmd.output.plot)
cli.add_command(cmd.transform.project)
cli.add_command(cmd.transform.mask)
cli.add_command(cmd.transform.mult)
cli.add_command(cmd.transform.norm)
cli.add_command(cmd.transform.fix)
cli.add_command(cmd.transform.comp)
cli.add_command(cmd.euler.euler)

if __name__ == '__main__':
    cli(obj={})
